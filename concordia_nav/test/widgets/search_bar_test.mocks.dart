// Mocks generated by Mockito 5.4.5 from annotations
// in concordia_nav/test/widgets/search_bar_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:concordia_nav/utils/search_viewmodel.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SearchViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchViewModel extends _i1.Mock implements _i2.SearchViewModel {
  MockSearchViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get buildings =>
      (super.noSuchMethod(
            Invocation.getter(#buildings),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> get filteredBuildings =>
      (super.noSuchMethod(
            Invocation.getter(#filteredBuildings),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  set filteredBuildings(List<String>? _filteredBuildings) => super.noSuchMethod(
    Invocation.setter(#filteredBuildings, _filteredBuildings),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void filterBuildings(String? query) => super.noSuchMethod(
    Invocation.method(#filterBuildings, [query]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
