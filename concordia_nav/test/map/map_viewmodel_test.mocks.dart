// Mocks generated by Mockito 5.4.5 from annotations
// in concordia_nav/test/map/map_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i11;

import 'package:concordia_nav/data/domain-model/concordia_building.dart'
    as _i10;
import 'package:concordia_nav/data/domain-model/concordia_campus.dart' as _i6;
import 'package:concordia_nav/data/repositories/map_repository.dart' as _i5;
import 'package:concordia_nav/data/services/map_service.dart' as _i4;
import 'package:concordia_nav/data/services/outdoor_directions_service.dart'
    as _i7;
import 'package:concordia_nav/utils/map_viewmodel.dart' as _i9;
import 'package:flutter/material.dart' as _i3;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:google_directions_api/google_directions_api.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCameraPosition_0 extends _i1.SmartFake
    implements _i2.CameraPosition {
  _FakeCameraPosition_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBitmapDescriptor_1 extends _i1.SmartFake
    implements _i2.BitmapDescriptor {
  _FakeBitmapDescriptor_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueNotifier_2<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMapService_3 extends _i1.SmartFake implements _i4.MapService {
  _FakeMapService_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeOutdoorRouteResult_1 extends _i1.SmartFake
    implements _i7.OutdoorRouteResult {
  _FakeOutdoorRouteResult_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [MapRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapRepository extends _i1.Mock implements _i5.MapRepository {
  MockMapRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CameraPosition getCameraPosition(_i6.ConcordiaCampus? campus) =>
      (super.noSuchMethod(
            Invocation.method(#getCameraPosition, [campus]),
            returnValue: _FakeCameraPosition_0(
              this,
              Invocation.method(#getCameraPosition, [campus]),
            ),
          )
          as _i2.CameraPosition);
}

/// A class which mocks [MapService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapService extends _i1.Mock implements _i4.MapService {
  MockMapService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setMapController(_i2.GoogleMapController? controller) =>
      super.noSuchMethod(
        Invocation.method(#setMapController, [controller]),
        returnValueForMissingStub: null,
      );

  @override
  void setDirectionsService(_i7.ODSDirectionsService? directionsService) =>
      super.noSuchMethod(
        Invocation.method(#setDirectionsService, [directionsService]),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CameraPosition getInitialCameraPosition(_i6.ConcordiaCampus? campus) =>
      (super.noSuchMethod(
            Invocation.method(#getInitialCameraPosition, [campus]),
            returnValue: _FakeCameraPosition_0(
              this,
              Invocation.method(#getInitialCameraPosition, [campus]),
            ),
          )
          as _i2.CameraPosition);

  @override
  void moveCamera(_i2.LatLng? position, {double? zoom = 17.0}) =>
      super.noSuchMethod(
        Invocation.method(#moveCamera, [position], {#zoom: zoom}),
        returnValueForMissingStub: null,
      );
  
  @override
  void adjustCameraForPath(List<_i2.LatLng> points) =>
      super.noSuchMethod(
        Invocation.method(#adjustCameraForPath, [points]),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.BitmapDescriptor> getCustomIcon(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getCustomIcon, [name]),
            returnValue: _i8.Future<_i2.BitmapDescriptor>.value(
              _FakeBitmapDescriptor_1(
                this,
                Invocation.method(#getCustomIcon, [name]),
              ),
            ),
          )
          as _i8.Future<_i2.BitmapDescriptor>);

  @override
  _i8.Future<void> zoomIn() =>
      (super.noSuchMethod(
            Invocation.method(#zoomIn, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> zoomOut() =>
      (super.noSuchMethod(
            Invocation.method(#zoomOut, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> isLocationServiceEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationServiceEnabled, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> checkAndRequestLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkAndRequestLocationPermission, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<_i2.LatLng?> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i8.Future<_i2.LatLng?>.value(),
          )
          as _i8.Future<_i2.LatLng?>);

  @override
  double calculateDistance(_i2.LatLng? point1, _i2.LatLng? point2) =>
      (super.noSuchMethod(
            Invocation.method(#calculateDistance, [point1, point2]),
            returnValue: 0.0,
          )
          as double);

  @override
  _i8.Future<List<_i2.LatLng>> getRoutePath(
    String? originAddress,
    String? destinationAddress,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRoutePath, [
              originAddress,
              destinationAddress,
            ]),
            returnValue: _i8.Future<List<_i2.LatLng>>.value(<_i2.LatLng>[]),
          )
          as _i8.Future<List<_i2.LatLng>>);

  @override
  Set<_i2.Polyline> getPolylines() =>
      (super.noSuchMethod(
            Invocation.method(#getPolylines, []),
            returnValue: <_i2.Polyline>{},
          )
          as Set<_i2.Polyline>);
}

/// A class which mocks [MapViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapViewModel extends _i1.Mock implements _i9.MapViewModel {
  MockMapViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ValueNotifier<_i10.ConcordiaBuilding?> get selectedBuildingNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#selectedBuildingNotifier),
        returnValue: _FakeValueNotifier_2<_i10.ConcordiaBuilding?>(
          this,
          Invocation.getter(#selectedBuildingNotifier),
        ),
      ) as _i3.ValueNotifier<_i10.ConcordiaBuilding?>);

  @override
  _i3.ValueNotifier<Set<_i2.Marker>> get shuttleMarkersNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#shuttleMarkersNotifier),
        returnValue: _FakeValueNotifier_2<Set<_i2.Marker>>(
          this,
          Invocation.getter(#shuttleMarkersNotifier),
        ),
      ) as _i3.ValueNotifier<Set<_i2.Marker>>);

  @override
  Set<_i2.Marker> get staticBusStopMarkers =>
      (super.noSuchMethod(
        Invocation.getter(#staticBusStopMarkers),
        returnValue: <_i2.Marker>{},
      ) as Set<_i2.Marker>);

  @override
  bool get shuttleAvailable =>
      (super.noSuchMethod(
        Invocation.getter(#shuttleAvailable),
        returnValue: false,
      ) as bool);

  @override
  set selectedBuildingNotifier(
    _i3.ValueNotifier<_i10.ConcordiaBuilding?>? _selectedBuildingNotifier,
  ) => super.noSuchMethod(
    Invocation.setter(#selectedBuildingNotifier, _selectedBuildingNotifier),
    returnValueForMissingStub: null,
  );

  @override
  Set<_i2.Polyline> get multiModePolylines => (super.noSuchMethod(
        Invocation.getter(#multiModePolylines),
        returnValue: <_i2.Polyline>{},
      ) as Set<_i2.Polyline>);

  @override
  Set<_i2.Polyline> get activePolylines => (super.noSuchMethod(
        Invocation.getter(#activePolylines),
        returnValue: <_i2.Polyline>{},
      ) as Set<_i2.Polyline>);

  @override
  _i4.MapService get mapService => (super.noSuchMethod(
        Invocation.getter(#mapService),
        returnValue: _FakeMapService_3(
          this,
          Invocation.getter(#mapService),
        ),
      ) as _i4.MapService);

  @override
  _i9.CustomTravelMode get selectedTravelModeForRoute => (super.noSuchMethod(
        Invocation.getter(#selectedTravelModeForRoute),
        returnValue: _i9.CustomTravelMode.driving
      ) as _i9.CustomTravelMode);

  @override
  _i9.CustomTravelMode get selectedTravelMode => (super.noSuchMethod(
        Invocation.getter(#selectedTravelMode),
        returnValue: _i9.CustomTravelMode.driving
      ) as _i9.CustomTravelMode);

  @override
  Map<_i9.CustomTravelMode, String> get multiModeTravelTimes => (super.noSuchMethod(
        Invocation.getter(#multiModeTravelTimes),
        returnValue: <_i9.CustomTravelMode, String>{},
      ) as Map<_i9.CustomTravelMode, String>);

  @override
  Map<_i9.CustomTravelMode, String> get travelTimes => (super.noSuchMethod(
        Invocation.getter(#travelTimes),
        returnValue: <_i9.CustomTravelMode, String>{},
      ) as Map<_i9.CustomTravelMode, String>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i8.Future<_i2.CameraPosition> getInitialCameraPosition(
    _i6.ConcordiaCampus? campus,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getInitialCameraPosition, [campus]),
            returnValue: _i8.Future<_i2.CameraPosition>.value(
              _FakeCameraPosition_0(
                this,
                Invocation.method(#getInitialCameraPosition, [campus]),
              ),
            ),
          )
          as _i8.Future<_i2.CameraPosition>);

  @override
  _i8.Future<void> fetchRoutesForAllModes(
    String? originAddress,
    String? destinationAddress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#fetchRoutesForAllModes, [originAddress, destinationAddress]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onMapCreated(_i2.GoogleMapController? controller) => super.noSuchMethod(
    Invocation.method(#onMapCreated, [controller]),
    returnValueForMissingStub: null,
  );

  @override
  void moveToLocation(_i2.LatLng? location) => super.noSuchMethod(
    Invocation.method(#moveToLocation, [location]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<Map<String, dynamic>> getCampusPolygonsAndLabels(
    _i6.ConcordiaCampus? campus,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCampusPolygonsAndLabels, [campus]),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<Map<String, dynamic>> getAllCampusPolygonsAndLabels() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCampusPolygonsAndLabels, []),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  void selectBuilding(_i10.ConcordiaBuilding? building) => super.noSuchMethod(
    Invocation.method(#selectBuilding, [building]),
    returnValueForMissingStub: null,
  );

  @override
  void unselectBuilding() => super.noSuchMethod(
    Invocation.method(#unselectBuilding, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<_i2.LatLng?> fetchCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#fetchCurrentLocation, []),
            returnValue: _i8.Future<_i2.LatLng?>.value(),
          )
          as _i8.Future<_i2.LatLng?>);

  @override
  _i8.Future<bool> checkLocationAccess() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationAccess, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> checkBuildingAtCurrentLocation(_i3.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#checkBuildingAtCurrentLocation, [context]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> moveToCurrentLocation(_i3.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#moveToCurrentLocation, [context]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> zoomIn() =>
      (super.noSuchMethod(
            Invocation.method(#zoomIn, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> zoomOut() =>
      (super.noSuchMethod(
            Invocation.method(#zoomOut, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  double getDistance(_i2.LatLng? point1, _i2.LatLng? point2) =>
      (super.noSuchMethod(
            Invocation.method(#getDistance, [point1, point2]),
            returnValue: 0.0,
          )
          as double);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(#notifyListeners, []),
        returnValueForMissingStub: null,
      );

  @override
  void startShuttleBusTimer() => super.noSuchMethod(
        Invocation.method(#startShuttleBusTimer, []),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> loadStaticBusStopMarkers() => (super.noSuchMethod(
        Invocation.method(#loadStaticBusStopMarkers, []),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void setActiveMode(_i9.CustomTravelMode mode) => super.noSuchMethod(
        Invocation.method(#setActiveMode, [mode]),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> setActiveModeForRoute(_i9.CustomTravelMode mode) => (super.noSuchMethod(
        Invocation.method(#setActiveModeForRoute, [mode]),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}


/// A class which mocks [ODSDirectionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockODSDirectionsService extends _i1.Mock implements _i7.ODSDirectionsService {
  MockODSDirectionsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i7.OutdoorRouteResult> fetchRouteResult(
    {required String originAddress, required String destinationAddress, required _i10.TravelMode travelMode, 
    String polylineId = "route", _i11.Color color = const _i3.Color(0xFF2196F3), int width = 5}) => (
      super.noSuchMethod(
        Invocation.method(#fetchRouteResult, [originAddress, destinationAddress, travelMode, polylineId, color, width]),
        returnValue: _i8.Future<_i7.OutdoorRouteResult>.value(
          _FakeOutdoorRouteResult_1(
            this,
            Invocation.method(#fetchRouteResult, [originAddress, destinationAddress, travelMode, polylineId, color, width]),
          ),
        ),
      ) as _i8.Future<_i7.OutdoorRouteResult>
    );

  @override
  _i8.Future<_i2.Polyline?> fetchWalkingPolyline(
    {required String originAddress, required String destinationAddress, String polylineId = "walking_route", 
    _i11.Color color = const _i3.Color(0xFF0c79fe), int width = 5}) => (
      super.noSuchMethod(
        Invocation.method(#fetchWalkingPolyline, [originAddress, destinationAddress]),
        returnValue: _i8.Future<_i2.Polyline?>.value(),
      ) as _i8.Future<_i2.Polyline?>
    );

  @override
  _i8.Future<List<_i2.LatLng>> fetchRoute(String originAddress, String destinationAddress) => (super.noSuchMethod(
        Invocation.method(#fetchRoute, [originAddress, destinationAddress]),
        returnValue: _i8.Future<List<_i2.LatLng>>.value(<_i2.LatLng>[]),
      ) as _i8.Future<List<_i2.LatLng>>);

  @override
  _i8.Future<List<_i2.LatLng>> fetchRouteFromCoords(_i2.LatLng origin, String destinationAddress) => (super.noSuchMethod(
        Invocation.method(#fetchRouteFromCoords, [origin, destinationAddress]),
        returnValue: _i8.Future<List<_i2.LatLng>>.value(<_i2.LatLng>[]),
      ) as _i8.Future<List<_i2.LatLng>>);
}