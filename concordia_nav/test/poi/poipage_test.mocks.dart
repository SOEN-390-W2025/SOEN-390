// Mocks generated by Mockito 5.4.5 from annotations
// in concordia_nav/test/poi/poipage_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:concordia_nav/data/domain-model/place.dart' as _i7;
import 'package:concordia_nav/data/domain-model/poi.dart' as _i6;
import 'package:concordia_nav/utils/poi/poi_viewmodel.dart' as _i4;
import 'package:flutter/material.dart' as _i3;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLatLng_0 extends _i1.SmartFake implements _i2.LatLng {
  _FakeLatLng_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIconData_1 extends _i1.SmartFake implements _i3.IconData {
  _FakeIconData_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [POIViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPOIViewModel extends _i1.Mock implements _i4.POIViewModel {
  MockPOIViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get globalSearchQuery =>
      (super.noSuchMethod(
            Invocation.getter(#globalSearchQuery),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#globalSearchQuery),
            ),
          )
          as String);

  @override
  _i2.LatLng get currentLocation =>
      (super.noSuchMethod(
            Invocation.getter(#currentLocation),
            returnValue: _FakeLatLng_0(
              this,
              Invocation.getter(#currentLocation),
            ),
          )
          as _i2.LatLng);

  @override
  List<_i6.POI> get allPOIs =>
      (super.noSuchMethod(Invocation.getter(#allPOIs), returnValue: <_i6.POI>[])
          as List<_i6.POI>);

  @override
  bool get isLoadingIndoor =>
      (super.noSuchMethod(
            Invocation.getter(#isLoadingIndoor),
            returnValue: false,
          )
          as bool);

  @override
  String get errorIndoor =>
      (super.noSuchMethod(
            Invocation.getter(#errorIndoor),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#errorIndoor),
            ),
          )
          as String);

  @override
  List<_i7.Place> get outdoorPOIs =>
      (super.noSuchMethod(
            Invocation.getter(#outdoorPOIs),
            returnValue: <_i7.Place>[],
          )
          as List<_i7.Place>);

  @override
  List<_i7.Place> get filteredOutdoorPOIs =>
      (super.noSuchMethod(
            Invocation.getter(#filteredOutdoorPOIs),
            returnValue: <_i7.Place>[],
          )
          as List<_i7.Place>);

  @override
  bool get isLoadingOutdoor =>
      (super.noSuchMethod(
            Invocation.getter(#isLoadingOutdoor),
            returnValue: false,
          )
          as bool);

  @override
  String get errorOutdoor =>
      (super.noSuchMethod(
            Invocation.getter(#errorOutdoor),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#errorOutdoor),
            ),
          )
          as String);

  @override
  double get searchRadius =>
      (super.noSuchMethod(Invocation.getter(#searchRadius), returnValue: 0.0)
          as double);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  bool get hasLocationPermission =>
      (super.noSuchMethod(Invocation.getter(#hasLocationPermission), returnValue: false)
          as bool);

  @override
  bool get isLoadingLocation =>
      (super.noSuchMethod(Invocation.getter(#isLoadingLocation), returnValue: false)
          as bool);

  @override
  _i8.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> loadIndoorPOIs() =>
      (super.noSuchMethod(
            Invocation.method(#loadIndoorPOIs, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void setGlobalSearchQuery(String? query) => super.noSuchMethod(
    Invocation.method(#setGlobalSearchQuery, [query]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i6.POI> filterPOIsWithGlobalSearch() =>
      (super.noSuchMethod(
            Invocation.method(#filterPOIsWithGlobalSearch, []),
            returnValue: <_i6.POI>[],
          )
          as List<_i6.POI>);

  @override
  List<String> getUniqueFilteredPOINames(List<_i6.POI>? pois) =>
      (super.noSuchMethod(
            Invocation.method(#getUniqueFilteredPOINames, [pois]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i3.IconData getIconForPOICategory(_i6.POICategory? category) =>
      (super.noSuchMethod(
            Invocation.method(#getIconForPOICategory, [category]),
            returnValue: _FakeIconData_1(
              this,
              Invocation.method(#getIconForPOICategory, [category]),
            ),
          )
          as _i3.IconData);

  @override
  _i8.Future<void> setSearchRadius(double? radius) =>
      (super.noSuchMethod(
            Invocation.method(#setSearchRadius, [radius]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> loadOutdoorPOIs(_i7.PlaceType? category) =>
      (super.noSuchMethod(
            Invocation.method(#loadOutdoorPOIs, [category]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> searchOutdoorPOIs(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchOutdoorPOIs, [query]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> refreshLocation() =>
      (super.noSuchMethod(
            Invocation.method(#refreshLocation, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void setOutdoorCategory(_i7.PlaceType? category, bool? selected) =>
      super.noSuchMethod(
        Invocation.method(#setOutdoorCategory, [category, selected]),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
