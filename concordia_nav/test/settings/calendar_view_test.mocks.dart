// Mocks generated by Mockito 5.4.5 from annotations
// in concordia_nav/test/settings/calendar_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:concordia_nav/data/domain-model/concordia_building.dart' as _i4;
import 'package:concordia_nav/data/domain-model/concordia_campus.dart' as _i3;
import 'package:concordia_nav/data/domain-model/concordia_room.dart' as _i7;
import 'package:concordia_nav/utils/building_viewmodel.dart' as _i2;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BuildingViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildingViewModel extends _i1.Mock implements _i2.BuildingViewModel {
  MockBuildingViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> getBuildingsByCampus(_i3.ConcordiaCampus? campus) =>
      (super.noSuchMethod(
            Invocation.method(#getBuildingsByCampus, [campus]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> getBuildings() =>
      (super.noSuchMethod(
            Invocation.method(#getBuildings, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i4.ConcordiaBuilding? getBuildingByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#getBuildingByName, [name]))
          as _i4.ConcordiaBuilding?);

  @override
  String? getBuildingAbbreviation(String? name) =>
      (super.noSuchMethod(Invocation.method(#getBuildingAbbreviation, [name]))
          as String?);

  @override
  _i4.ConcordiaBuilding? getBuildingByAbbreviation(String? abbreviation) =>
      (super.noSuchMethod(
            Invocation.method(#getBuildingByAbbreviation, [abbreviation]),
          )
          as _i4.ConcordiaBuilding?);

  @override
  _i5.LatLng? getBuildingLocationByAbbreviation(String? abbreviation) =>
      (super.noSuchMethod(
            Invocation.method(#getBuildingLocationByAbbreviation, [
              abbreviation,
            ]),
          )
          as _i5.LatLng?);

  @override
  _i5.LatLng? getBuildingLocationByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#getBuildingLocationByName, [name]))
          as _i5.LatLng?);

  @override
  _i6.Future<List<String>> getFloorsForBuilding(String? buildingName) =>
      (super.noSuchMethod(
            Invocation.method(#getFloorsForBuilding, [buildingName]),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  _i6.Future<List<_i7.ConcordiaRoom>> getRoomsForFloor(
    String? buildingName,
    String? floorName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRoomsForFloor, [buildingName, floorName]),
            returnValue: _i6.Future<List<_i7.ConcordiaRoom>>.value(
              <_i7.ConcordiaRoom>[],
            ),
          )
          as _i6.Future<List<_i7.ConcordiaRoom>>);

  @override
  _i4.ConcordiaBuilding? getBuildingFromLocation(String? location) =>
      (super.noSuchMethod(
            Invocation.method(#getBuildingFromLocation, [location]),
          )
          as _i4.ConcordiaBuilding?);
}
