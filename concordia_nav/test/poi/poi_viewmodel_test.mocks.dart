// Mocks generated by Mockito 5.4.5 from annotations
// in concordia_nav/test/poi/poi_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:concordia_nav/data/domain-model/concordia_campus.dart' as _i5;
import 'package:concordia_nav/data/domain-model/place.dart' as _i8;
import 'package:concordia_nav/data/services/map_service.dart' as _i3;
import 'package:concordia_nav/data/services/outdoor_directions_service.dart'
    as _i4;
import 'package:concordia_nav/data/services/places_service.dart' as _i7;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCameraPosition_0 extends _i1.SmartFake
    implements _i2.CameraPosition {
  _FakeCameraPosition_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBitmapDescriptor_1 extends _i1.SmartFake
    implements _i2.BitmapDescriptor {
  _FakeBitmapDescriptor_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MapService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapService extends _i1.Mock implements _i3.MapService {
  MockMapService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setMapController(_i2.GoogleMapController? controller) =>
      super.noSuchMethod(
        Invocation.method(#setMapController, [controller]),
        returnValueForMissingStub: null,
      );

  @override
  void setDirectionsService(_i4.ODSDirectionsService? directionsService) =>
      super.noSuchMethod(
        Invocation.method(#setDirectionsService, [directionsService]),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CameraPosition getInitialCameraPosition(_i5.ConcordiaCampus? campus) =>
      (super.noSuchMethod(
            Invocation.method(#getInitialCameraPosition, [campus]),
            returnValue: _FakeCameraPosition_0(
              this,
              Invocation.method(#getInitialCameraPosition, [campus]),
            ),
          )
          as _i2.CameraPosition);

  @override
  void moveCamera(_i2.LatLng? position, {double? zoom = 17.0}) =>
      super.noSuchMethod(
        Invocation.method(#moveCamera, [position], {#zoom: zoom}),
        returnValueForMissingStub: null,
      );

  @override
  void adjustCameraForPath(List<_i2.LatLng>? points) => super.noSuchMethod(
    Invocation.method(#adjustCameraForPath, [points]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i2.BitmapDescriptor> getCustomIcon(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getCustomIcon, [name]),
            returnValue: _i6.Future<_i2.BitmapDescriptor>.value(
              _FakeBitmapDescriptor_1(
                this,
                Invocation.method(#getCustomIcon, [name]),
              ),
            ),
          )
          as _i6.Future<_i2.BitmapDescriptor>);

  @override
  _i6.Future<bool> isLocationServiceEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationServiceEnabled, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> checkAndRequestLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkAndRequestLocationPermission, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i2.LatLng?> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i6.Future<_i2.LatLng?>.value(),
          )
          as _i6.Future<_i2.LatLng?>);

  @override
  double calculateDistance(_i2.LatLng? point1, _i2.LatLng? point2) =>
      (super.noSuchMethod(
            Invocation.method(#calculateDistance, [point1, point2]),
            returnValue: 0.0,
          )
          as double);

  @override
  _i6.Future<List<_i2.LatLng>> getRoutePath(
    String? originAddress,
    String? destinationAddress,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRoutePath, [
              originAddress,
              destinationAddress,
            ]),
            returnValue: _i6.Future<List<_i2.LatLng>>.value(<_i2.LatLng>[]),
          )
          as _i6.Future<List<_i2.LatLng>>);
}

/// A class which mocks [PlacesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacesService extends _i1.Mock implements _i7.PlacesService {
  MockPlacesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i8.Place>> nearbySearch({
    required _i2.LatLng? location,
    required _i8.PlaceType? includedType,
    _i7.NearbySearchOptions? options = const _i7.NearbySearchOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#nearbySearch, [], {
              #location: location,
              #includedType: includedType,
              #options: options,
            }),
            returnValue: _i6.Future<List<_i8.Place>>.value(<_i8.Place>[]),
          )
          as _i6.Future<List<_i8.Place>>);

  @override
  _i6.Future<List<_i8.Place>> textSearch({
    required String? textQuery,
    required _i2.LatLng? location,
    required _i8.PlaceType? includedType,
    _i7.TextSearchOptions? options = const _i7.TextSearchOptions(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#textSearch, [], {
              #textQuery: textQuery,
              #location: location,
              #includedType: includedType,
              #options: options,
            }),
            returnValue: _i6.Future<List<_i8.Place>>.value(<_i8.Place>[]),
          )
          as _i6.Future<List<_i8.Place>>);
}
