// Mocks generated by Mockito 5.4.5 from annotations
// in concordia_nav/test/smart_planner/smart_planner_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:concordia_nav/data/domain-model/location.dart' as _i2;
import 'package:concordia_nav/data/domain-model/travelling_salesman_request.dart'
    as _i3;
import 'package:concordia_nav/data/services/smart_planner_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocation_0 extends _i1.SmartFake implements _i2.Location {
  _FakeLocation_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTravellingSalesmanRequest_1 extends _i1.SmartFake
    implements _i3.TravellingSalesmanRequest {
  _FakeTravellingSalesmanRequest_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SmartPlannerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSmartPlannerService extends _i1.Mock
    implements _i4.SmartPlannerService {
  MockSmartPlannerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Location> getLocationByName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getLocationByName, [name]),
            returnValue: _i5.Future<_i2.Location>.value(
              _FakeLocation_0(
                this,
                Invocation.method(#getLocationByName, [name]),
              ),
            ),
          )
          as _i5.Future<_i2.Location>);

  @override
  _i5.Future<_i3.TravellingSalesmanRequest> generatePlannerData({
    required String? prompt,
    required DateTime? startTime,
    required _i2.Location? startLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generatePlannerData, [], {
              #prompt: prompt,
              #startTime: startTime,
              #startLocation: startLocation,
            }),
            returnValue: _i5.Future<_i3.TravellingSalesmanRequest>.value(
              _FakeTravellingSalesmanRequest_1(
                this,
                Invocation.method(#generatePlannerData, [], {
                  #prompt: prompt,
                  #startTime: startTime,
                  #startLocation: startLocation,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.TravellingSalesmanRequest>);

  @override
  _i5.Future<List<(String, _i2.Location, DateTime, DateTime)>>
  generateOptimizedRoute({
    required String? prompt,
    required DateTime? startTime,
    required _i2.Location? startLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateOptimizedRoute, [], {
              #prompt: prompt,
              #startTime: startTime,
              #startLocation: startLocation,
            }),
            returnValue: _i5.Future<
              List<(String, _i2.Location, DateTime, DateTime)>
            >.value(<(String, _i2.Location, DateTime, DateTime)>[]),
          )
          as _i5.Future<List<(String, _i2.Location, DateTime, DateTime)>>);
}
